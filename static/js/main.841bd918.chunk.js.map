{"version":3,"sources":["components/baseComponents/SkeletonBase.tsx","contexts/worldCasesContext.tsx","components/world/WorldDataSummary.tsx","contexts/countriesContext.tsx","components/maps/MapWorld.tsx","components/charts/WorldPieChart.tsx","components/charts/WorldMultiBarChart.tsx","pages/HomePage.tsx","components/baseComponents/Main-nav.tsx","pages/DashBoardPage.tsx","components/countries/CountrySummary.tsx","components/forms/SearchCountriesForm.tsx","components/countries/CountriesList.tsx","pages/CountriesPage.tsx","pages/RegionsPage.tsx","components/charts/CountrySummaryBarChart.tsx","components/countries/CountryDetails.tsx","contexts/CountryDetailsContext.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SkeletonBase","className","Skeleton","variant","height","role","WorldDataContext","createContext","WorldDataContextProvider","props","useState","worldData","setWorldData","isLoading","setIsLoading","fetchData","a","fetch","res","json","data","useEffect","setTimeout","children","Provider","value","WorldDataSummary","useContext","console","log","Grid","container","item","md","sm","xs","Box","sx","p","border","color","cases","active","todayCases","recovered","todayRecovered","deaths","todayDeaths","CountriesContext","CountriesContextProvider","countriesData","setCountriesData","isCountriesDataLoading","setIsCountriesDataLoading","fetchCountriesData","MapWorldComponent","countriesMapData","setCountriesMapData","formattedData","map","C","obj","country","code","latest_data","confirmed","push","prepareDataForCountriesMap","title","ChartJS","register","ArcElement","Tooltip","Legend","WorldPieChart","labels","datasets","label","backgroundColor","borderWidth","LinearScale","CategoryScale","BarElement","PointElement","LineElement","type","borderColor","fill","WorldMultiBarChart","HomePage","justifyContent","direction","MapWorld","Header","to","id","DashBoardPage","Title","CountrySummary","latestData","isloadindChart","chartOptions","responsive","plugins","legend","position","display","text","name","Card","minWidth","m","boxShadow","CircularProgress","options","CardContent","Typography","gutterBottom","component","style","CardActions","SearchcountriesForm","handleSearch","action","onChange","e","target","placeholder","CountriesList","countriesListData","setCountriesListData","val","searchResult","filter","toLowerCase","includes","CountriesPage","RegionsPage","CountrySummaryBarChart","CountryDetails","useParams","countryDetails","setCountrydetails","mapTimeline","setMapTimeline","isloading","setIsloading","fetchCountryData","timeline","slice","date","newConfirmed","new_confirmed","newRecovered","new_recovered","newDeaths","new_deaths","dataSets","newCasesdataSets","Date","updated_at","toLocaleString","population","calculated","cases_per_million_population","death_rate","toFixed","recovery_rate","recovered_vs_death_ratio","maxHeight","CountryDetailscontext","CountryDetailsProvider","isCountryDetailsLoading","setIsCountryDetailsLoading","routes","path","App","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RAmBeA,EAjBM,WACjB,OAAQ,mCACJ,sBAAKC,UAAU,mCAAf,UACI,cAACC,EAAA,EAAD,CAAUC,QAAQ,OAAOC,OAAQ,KACjC,qBAAKH,UAAU,yBAAyBI,KAAK,SAA7C,SACI,sBAAMJ,UAAU,kBAAhB,0BAEJ,oBAAIA,UAAU,cAAd,2BACA,cAACC,EAAA,EAAD,CAAUC,QAAQ,cAAcC,OAAQ,YCNvCE,EAAmBC,wBAAc,IAqC/BC,EAnCkB,SAACC,GAC9B,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAIMC,EAAS,uCAAG,8BAAAC,EAAA,sEACIC,MAHD,oCAEH,cACRC,EADQ,gBAEKA,EAAIC,OAFT,cAERC,EAFQ,OAGdR,EAAaQ,GAHC,kBAIPA,GAJO,2CAAH,qDAMfC,qBAAU,WACNP,GAAa,GACbC,IACAO,YAAW,WACKR,GAAZH,KAED,OAEJ,IAGH,IAAQY,EAAad,EAAbc,SACR,OACI,cAACjB,EAAiBkB,SAAlB,CAA2BC,MAAOd,EAAlC,SACKE,EAAY,cAAC,EAAD,IAAmBU,KCoD7BG,EA7EU,WACrB,IAAMf,EAAwBgB,qBAAWrB,GAGzC,OAFAsB,QAAQC,IAAI,YAAalB,GAGrB,mCAEI,eAACmB,EAAA,EAAD,CAAMC,WAAS,EAAC9B,UAAU,uBAA1B,UACI,cAAC6B,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAA/B,SACI,eAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,EAAG,EAAGC,OAAQ,kBAAzB,UACI,+CACA,eAACH,EAAA,EAAD,CAAKC,GAAI,CAAEG,MAAO,aAAlB,eAAoC7B,EAAU8B,cAGtD,cAACX,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAA9B,SACI,eAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,EAAG,EAAGC,OAAQ,kBAAzB,UACI,gDACA,eAACH,EAAA,EAAD,CAAKC,GAAI,CAAEG,MAAO,aAAlB,gBAAqC7B,EAAU+B,eAKvD,cAACZ,EAAA,EAAD,CAAMG,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAAzB,SACI,eAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,EAAG,EAAGC,OAAQ,kBAAzB,UACI,8CACA,eAACH,EAAA,EAAD,CAAKC,GAAI,CAAEG,MAAO,aAAlB,gBAAqC7B,EAAUgC,mBAKvD,cAACb,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAA/B,SACI,eAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,EAAG,EAAGC,OAAQ,kBAAzB,UACI,mDACA,eAACH,EAAA,EAAD,CAAKC,GAAI,CAAEG,MAAO,aAAlB,gBAAqC7B,EAAUiC,kBAIvD,cAACd,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAA9B,SACI,eAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,EAAG,EAAGC,OAAQ,kBAAzB,UACI,kDACA,eAACH,EAAA,EAAD,CAAKC,GAAI,CAAEG,MAAO,aAAlB,eAAoC7B,EAAUkC,uBAOtD,cAACf,EAAA,EAAD,CAAMG,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAAzB,SACI,eAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,EAAG,EAAGC,OAAQ,kBAAzB,UACI,oDACA,eAACH,EAAA,EAAD,CAAKC,GAAI,CAAEG,MAAO,aAAlB,gBAAqC7B,EAAUkC,uBAKvD,cAACf,EAAA,EAAD,CAAMG,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAA1B,SACI,eAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,EAAG,EAAGC,OAAQ,kBAAzB,UACI,iDACA,eAACH,EAAA,EAAD,CAAKC,GAAI,CAAEG,MAAO,aAAlB,gBAAqC7B,EAAUmC,eAKvD,cAAChB,EAAA,EAAD,CAAMG,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAAzB,SACI,eAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,EAAG,EAAGC,OAAQ,kBAAzB,UACI,iDACA,eAACH,EAAA,EAAD,CAAKC,GAAI,CAAEG,MAAO,aAAlB,gBAAqC7B,EAAUoC,0B,QCnE1DC,EAAmBzC,wBAAc,IAiC/B0C,EA7BkB,SAACxC,GAC9B,MAA0CC,mBAAuB,IAAjE,mBAAOwC,EAAP,KAAsBC,EAAtB,KACA,EAA4DzC,oBAAS,GAArE,mBAAO0C,EAAP,KAA+BC,EAA/B,KACQ9B,EAAad,EAAbc,SAEF+B,EAAkB,uCAAG,8BAAAtC,EAAA,sEACLC,MARX,oCAOgB,cACjBC,EADiB,gBAEJA,EAAIC,OAFA,cAEjBC,EAFiB,OAGvB+B,EAAiB/B,GAHM,kBAIhBA,GAJgB,2CAAH,qDAexB,OATAC,qBAAU,WACNgC,GAA0B,GAC1BC,IACAhC,YAAW,WACP+B,GAA0B,KAC3B,OAEJ,IAIC,eAACL,EAAiBxB,SAAlB,CAA2BC,MAAOyB,EAAlC,gBAAqDE,EAAyB,cAAC,EAAD,IAAmB7B,EAAjG,QCUOgC,EAnCW,WACtB,IAAML,EAA8BvB,qBAAWqB,GAC/CpB,QAAQC,IAAI,kCAAmCqB,GAE/C,MAAgDxC,mBAAS,IAAzD,mBAAO8C,EAAP,KAAyBC,EAAzB,KACA7B,QAAQC,IAAI,wBAAyBqB,GAkBrC,OALA7B,qBAAU,YAXyB,WAC/B,IAAMqC,EAAqB,GACvBR,EAAc9B,OACd8B,EAAc9B,KAAMuC,KAAI,SAAAC,GACpB,IAAMC,EAAM,CAAEC,QAASF,EAAEG,KAAMtC,MAAOmC,EAAEI,YAAYC,WACpD,OAAOP,EAAcQ,KAAKL,MAE9BJ,EAAoBC,IAMxBS,KAED,IAGC,mCACI,cAACrC,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAA/B,SACI,cAAC,WAAD,CAAUK,MAAM,kBAAkB4B,MAAM,iCAAiChD,KAAMoC,S,eC5B/Fa,IAAQC,SAASC,IAAYC,IAASC,KAEtC,IAsCeC,EAtCO,WAClB,IAAM/D,EAAwBgB,qBAAWrB,GAInCc,EAAO,CACTuD,OAJc,CAAC,QAAS,SAAU,aAKlCC,SAAU,CACN,CACIC,MAAO,eACPzD,KAPI,CAACT,EAAU8B,MAAO9B,EAAUmC,OAAQnC,EAAUiC,WAQlDkC,gBAAiB,CACb,mBACA,oBACA,mBAGJC,YAAa,KAWzB,OAEI,cAAC,IAAD,CAAU3D,KAAMA,EAAhB,iBCtBRiD,IAAQC,SACJU,IACAC,IACAC,IACAC,IACAC,IACAX,IACAD,KAGJ,IAsBMpD,EAAO,CACTuD,OAvBW,CAAC,QAAS,QAAS,SAAU,aAuBhCC,SArBK,CACb,CACIS,KAAM,OACNR,MAAO,QACPS,YAAa,kBACbP,YAAa,EACbQ,MAAM,EACNnE,KAAM,CAAC,IAAM,IAAM,IAAM,MAE7B,CACIiE,KAAM,OACNR,MAAO,SACPS,YAAa,mBACbP,YAAa,EACbQ,MAAM,EACNnE,KAAM,CAAC,IAAK,IAAK,IAAM,QAkBhBoE,EATY,WAEvB,OAEI,qCAAE,cAAC,IAAD,CAAOH,KAAK,MAAMjE,KAAMA,IAA1B,QClBOqE,EAjCE,WACb,OAAQ,qCACJ,4CACA,eAAC3D,EAAA,EAAD,CAAMC,WAAS,EAAC2D,eAAe,SAASC,UAAU,MAAlD,UACI,cAAC7D,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAAIlC,UAAU,SAA5C,SACI,cAAC,EAAD,MAEJ,cAAC6B,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAAIlC,UAAU,SAA5C,SACI,eAAC6B,EAAA,EAAD,CAAMC,WAAS,EAAC2D,eAAe,SAASC,UAAU,MAAlD,UACI,cAAC7D,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAAIlC,UAAU,SAA5C,SACI,cAAC2F,EAAD,MAEJ,cAAC9D,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIlC,UAAU,SAA3C,SACI,cAAC,EAAD,MAEJ,eAAC6B,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIlC,UAAU,SAA3C,UACI,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,mB,QCeT4F,EAnCO,WAElB,OAEI,mCAEI,qBAAK5F,UAAU,8CAAf,SAEI,sBAAKA,UAAU,kBAAf,UACI,cAAC,IAAD,CAAMA,UAAU,yBAAyB6F,GAAG,QAA5C,8BACA,wBAAQ7F,UAAU,iBAAiBoF,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAA5L,SACI,sBAAMpF,UAAU,0BAGpB,qBAAKA,UAAU,4BAA4B8F,GAAG,yBAA9C,SACI,qBAAI9F,UAAU,kCAAd,UACI,oBAAIA,UAAU,WAAd,SACI,cAAC,IAAD,CAAMA,UAAU,kBAAkB6F,GAAG,aAArC,yBAEJ,oBAAI7F,UAAU,WAAd,SACI,cAAC,IAAD,CAAMA,UAAU,WAAW6F,GAAG,WAA9B,uBAEJ,oBAAI7F,UAAU,WAAd,SACI,cAAC,IAAD,CAAMA,UAAU,WAAW6F,GAAG,aAA9B,sC,OChBjBE,EARO,WAClB,OACI,yCAAG,sD,6CCuBX3B,IAAQC,SACJW,IACAD,IACAE,IAAYC,IACZC,IACAa,IACAzB,IACAC,KAKJ,IA2DeyB,EA3DQ,SAACzF,GACpB,IAAQqD,EAAYrD,EAAZqD,QACaqC,EAAerC,EAA5BE,YACR,EAAyBtD,oBAAS,GAA3B0F,EAAP,oBAGMC,EAAe,CACjBC,YAAY,EACZC,QAAS,CACLC,OAAQ,CACJC,SAAU,OAEdrC,MAAO,CACHsC,SAAS,EACTC,KAAM7C,EAAQ8C,QAKpBxF,EAAO,CACTuD,OAfW,CAAC,UAgBZC,SAAU,CACN,CACIC,MAAO,SACPzD,KAAM,CAAC+E,EAAWrD,QAClBgC,gBAAiB,0BAErB,CACID,MAAO,QACPzD,KAAM,CAAC+E,EAAWlC,WAClBa,gBAAiB,2BAErB,CACID,MAAO,YACPzD,KAAM,CAAC+E,EAAWvD,UAAYuD,EAAWvD,UAAY,GACrDkC,gBAAiB,sBAO7B,OACI,eAAC+B,EAAA,EAAD,CAAMxE,GAAI,CAAEyE,SAAU,IAAKC,EAAG,EAAGC,UAAW,GAAK/G,UAAU,qBAA3D,UAEKmG,EAAiB,cAACa,EAAA,EAAD,CAAkBzE,MAAM,YAAe,cAAC,IAAD,CAAK0E,QAASb,EAAcjF,KAAMA,EAAlC,eAEzD,eAAC+F,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,cAAY,EAAClH,QAAQ,KAAKmH,UAAU,MAAhD,SACI,oBAAGrH,UAAU,UAAUsH,MAAO,CAAE/E,MAAO,mBAAvC,gBAAiEsB,EAAQ8C,UAE7E,cAACQ,EAAA,EAAD,CAAYjH,QAAQ,QAAQqC,MAAM,iBAAlC,SACI,cAAC,IAAD,CAAMvC,UAAU,uBAAuB6F,GAAE,qBAAgBhC,EAAQC,MAAjE,qCAEJ,cAACyD,EAAA,EAAD,WCrFD,SAASC,EAAoBhH,GACxC,IAAQiH,EAAiBjH,EAAjBiH,aAER,OACI,mCACI,sBAAMC,OAAO,GAAb,SACI,qBAAK1H,UAAU,aAAf,SACI,uBAAOoF,KAAK,OAAOuB,KAAK,SAASb,GAAG,GAAG9F,UAAU,eAAe2H,SAAU,SAACC,GAAD,OAAOH,EAAaG,EAAEC,OAAOrG,QAAQsG,YAAY,uCCP/I,IAqCeC,EArCO,WAClB,IAAM9E,EAA8BvB,qBAAWqB,GAC/C,EAAkDtC,mBAASwC,EAAc9B,MAAzE,mBAAO6G,EAAP,KAA0BC,EAA1B,KAaA,OACI,yCAAG,oBAAIjI,UAAU,wBAAd,4BACC,cAAC6B,EAAA,EAAD,CAAMC,WAAS,EAAC2D,eAAe,SAASC,UAAU,MAAMoB,EAAG,EAA3D,SACI,cAACjF,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAAIlC,UAAU,SAA5C,SACI,cAACwH,EAAD,CAAqBC,aAfhB,SAACS,GAAoB,IAAD,EAC/BC,EAAY,UAAGlF,EAAc9B,YAAjB,aAAG,EAAoBiH,QAAO,SAACvE,GAE7C,OAAOA,EAAQ8C,KAAK0B,cAAcC,SAASJ,MAG/CvG,QAAQC,IAAR,eAA4BuG,GAC5BF,EAAqBE,UAWjB,cAACtG,EAAA,EAAD,CAAMC,WAAS,EAAC2D,eAAe,SAASC,UAAU,MAAlD,SAEMsC,EAEEA,EAAkBtE,KAAI,SAAAG,GAAO,OAAI,cAAC,EAAD,CAAmCA,QAASA,GAAvBA,EAAQC,SAF5C,wBCdvByE,EAdO,WAGlB,OACI,mCAEI,cAAC,EAAD,OCHGC,EAPK,WAEhB,OACI,yCAAG,oDCWXpE,IAAQC,SACJW,IACAD,IACAE,IACAe,IACAzB,IACAC,KAEG,IAAMyC,EAAU,CACnBZ,YAAY,EACZC,QAAS,CACLC,OAAQ,CACJC,SAAU,OAEdrC,MAAO,CACHsC,SAAS,EACTC,KAAM,wBA0CH+B,EARgB,SAACjI,GAC5B,IAAQkE,EAAqBlE,EAArBkE,OAAQC,EAAanE,EAAbmE,SAChB,OACI,mCACI,cAAC,IAAD,CAAKxD,KAAM,CAAEuD,SAAQC,YAAYsC,QAASA,EAA1C,mBCqIGyB,EAjMQ,WAAqB,IAAD,sDAC/B5E,EAAS6E,cAAT7E,KAER,EAA4CrD,mBAAc,IAA1D,mBAAOmI,EAAP,KAAuBC,EAAvB,KACA,EAAsCpI,mBAAS,IAA/C,mBAAOqI,EAAP,KAAoBC,EAApB,KACA,EAAkCtI,oBAAkB,GAApD,mBAAOuI,EAAP,KAAkBC,EAAlB,KAIMC,EAAgB,uCAAG,WAAOpF,GAAP,iBAAA/C,EAAA,sEACHC,MAAM,GAAD,OAHR,mCAGQ,YAAkB8C,IADpB,cACf7C,EADe,gBAEFA,EAAIC,OAFF,cAEfC,EAFe,OAGrB0H,EAAkB1H,GAClB4H,EAAe5H,EAAKA,KAAKgI,SAASC,MAAM,EAAG,IAJtB,kBAMdjI,GANc,2CAAH,sDAShBuD,EAASoE,EAAYpF,KAAI,SAACE,GAAD,OAAcA,EAAIyF,QAC3C5G,EAASqG,EAAYpF,KAAI,SAACE,GAAD,OAAcA,EAAInB,UAC3CuB,EAAY8E,EAAYpF,KAAI,SAACE,GAAD,OAAcA,EAAII,aAC9CrB,GAAYmG,EAAYpF,KAAI,SAACE,GAAD,OAAcA,EAAIjB,aAC9CE,GAASiG,EAAYpF,KAAI,SAACE,GAAD,OAAcA,EAAIf,UAE3CyG,GAAeR,EAAYpF,KAAI,SAACE,GAAD,OAAcA,EAAI2F,iBACjDC,GAAeV,EAAYpF,KAAI,SAACE,GAAD,OAAcA,EAAI6F,iBACjDC,GAAYZ,EAAYpF,KAAI,SAACE,GAAD,OAAcA,EAAI+F,cAGpDvI,qBAAU,WACN6H,GAAa,GACbC,EAAiBpF,GACjBzC,YAAW,WACU4H,GAAjBL,KACD,QAEJ,IAGH,IAAMgB,GAAgC,CAClC,CACIhF,MAAO,SACPzD,KAAMsB,EACNoC,gBAAiB,0BAErB,CACID,MAAO,YACPzD,KAAM6C,EACNa,gBAAiB,2BAErB,CACID,MAAO,SACPzD,KAAM0B,GACNgC,gBAAiB,oBAErB,CACID,MAAO,YACPzD,KAAMwB,GACNkC,gBAAiB,0BAKnBgF,GAAwC,CAE1C,CACIjF,MAAO,gBACPzD,KAAMmI,GACNzE,gBAAiB,2BAErB,CACID,MAAO,aACPzD,KAAMuI,GACN7E,gBAAiB,oBAErB,CACID,MAAO,gBACPzD,KAAMqI,GACN3E,gBAAiB,0BAwBnB1D,GAAO,CACTuD,OAAQ,CAAC,SAAU,aAAc,aACjCC,SAtBqB,CACrB,CACIC,MAAO,QACPzD,KAAM,WAACyH,EAAezH,YAAhB,iBAAC,EAAqB4C,mBAAtB,aAAC,EAAkClB,OAAnC,UAA2C+F,EAAezH,YAA1D,iBAA2C,EAAqB4C,mBAAhE,aAA2C,EAAkCC,UAA7E,UAAwF4E,EAAezH,YAAvG,iBAAwF,EAAqB4C,mBAA7G,aAAwF,EAAkCpB,WAChIkC,gBAAiB,CACb,0BACA,0BACA,2BAGJQ,YAAa,CACT,wBACA,wBACA,yBAGJP,YAAa,KAWrB,OACI,mCAEKkE,EAAY,cAAC,EAAD,IACT,yCAAG,qBAAIhJ,UAAU,2BAAd,oBAA0C4I,EAAezH,YAAzD,aAA0C,EAAqBwF,KAA/D,OACC,eAAC9E,EAAA,EAAD,CAAMC,WAAS,EAAC2D,eAAe,SAASC,UAAU,MAAlD,UACI,cAAC7D,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAAIlC,UAAU,WAA5C,SACI,eAAC6B,EAAA,EAAD,CAAMC,WAAS,EAAC2D,eAAe,SAASC,UAAU,MAAlD,UACI,cAAC7D,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIlC,UAAU,+BAA7C,SACI,qDAAwB,IAAI8J,KAAJ,UAASlB,EAAezH,YAAxB,aAAS,EAAqB4I,YAAYC,iBAAlE,SAGJ,cAACnI,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIlC,UAAU,kBAA7C,SACI,oBAAIA,UAAU,eAAd,mCAKZ,eAAC6B,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAA9B,UACI,eAACL,EAAA,EAAD,CAAMC,WAAS,EAAC2D,eAAe,SAASC,UAAU,MAAM1F,UAAU,kBAAlE,UACI,eAAC6B,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGlC,UAAU,SAA1C,UACI,oBAAIA,UAAU,wBAAd,2BACA,qBAAIA,UAAU,iBAAd,wBAAiC4I,EAAezH,YAAhD,aAAiC,EAAqB8I,WAAtD,UAEJ,eAACpI,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGlC,UAAU,SAA1C,UACI,oBAAIA,UAAU,wBAAd,uBACA,qBAAIA,UAAU,iBAAd,wBAAiC4I,EAAezH,YAAhD,iBAAiC,EAAqB4C,mBAAtD,aAAiC,EAAkCC,UAAnE,UAEJ,eAACnC,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGlC,UAAU,SAA1C,UACI,oBAAIA,UAAU,wBAAd,uBACA,qBAAIA,UAAU,iBAAd,yBAAkC4I,EAAezH,YAAjD,iBAAkC,EAAqB4C,mBAAvD,aAAkC,EAAkClB,OAApE,UAEJ,eAAChB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGlC,UAAU,SAA1C,UACI,oBAAIA,UAAU,wBAAd,0BACA,qBAAIA,UAAU,iBAAd,wBAAiC4I,EAAezH,YAAhD,iBAAiC,EAAqB4C,mBAAtD,aAAiC,EAAkCpB,UAAnE,aAKR,eAACd,EAAA,EAAD,CAAMC,WAAS,EAAC2D,eAAe,SAASC,UAAU,MAAM1F,UAAU,kBAAlE,UACI,eAAC6B,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGlC,UAAU,SAA1C,UACI,oBAAIA,UAAU,wBAAd,mCACA,qBAAIA,UAAU,iBAAd,wBAAiC4I,EAAezH,YAAhD,iBAAiC,EAAqB4C,mBAAtD,aAAiC,EAAkCmG,WAAWC,6BAA9E,UAGJ,eAACtI,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGlC,UAAU,SAA1C,UACI,oBAAIA,UAAU,wBAAd,2BACA,qBAAIA,UAAU,iBAAd,yBAAkC4I,EAAezH,YAAjD,iBAAkC,EAAqB4C,mBAAvD,iBAAkC,EAAkCmG,WAAWE,kBAA/E,aAAkC,EAAyDC,QAAQ,GAAnG,UAEJ,eAACxI,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGlC,UAAU,SAA1C,UACI,oBAAIA,UAAU,wBAAd,8BACA,qBAAIA,UAAU,iBAAd,wBAAiC4I,EAAezH,YAAhD,iBAAiC,EAAqB4C,mBAAtD,iBAAiC,EAAkCmG,WAAWI,qBAA9E,aAAiC,EAA4DD,QAAQ,GAArG,UAEJ,eAACxI,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGlC,UAAU,SAA1C,UACI,oBAAIA,UAAU,wBAAd,0CACA,qBAAIA,UAAU,iBAAd,kCAAiC4I,EAAezH,YAAhD,iBAAiC,EAAqB4C,mBAAtD,iBAAiC,EAAkCmG,kBAAnE,aAAiC,EAA8CK,gCAA/E,QAA2G,EAA3G,aAIR,eAAC1I,EAAA,EAAD,CAAMC,WAAS,EAAC2D,eAAe,SAASC,UAAU,MAAM1F,UAAU,UAAlE,UACI,cAAC6B,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGlC,UAAU,SAA1C,SACI,cAAC,EAAD,CAAwB0E,OAAQA,EAAQC,SAAUiF,OAEtD,cAAC/H,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGlC,UAAU,SAA1C,SACI,cAAC,EAAD,CAAwB0E,OAAQA,EAAQC,SAAUkF,OAEtD,cAAChI,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGlC,UAAU,SAA1C,SACI,cAAC,IAAD,CAAUmB,KAAMA,GAAMmG,MAAO,CAAEkD,UAAW,wBCnLjEC,EAAwBnK,wBAAmB,IAmCzCoK,EA5BgB,SAAC,GAAuB,IAArBpJ,EAAoB,EAApBA,SAExB4H,EAAgB,uCAAG,WAAOpF,GAAP,iBAAA/C,EAAA,sEACHC,MAAM,GAAD,OARZ,mCAQY,YAAkB8C,IADpB,cACf7C,EADe,gBAEFA,EAAIC,OAFF,cAEfC,EAFe,OAGrBQ,QAAQC,IAAR,aAA0BT,GAC1B0H,EAAkB1H,GAJG,kBAKdA,GALc,2CAAH,sDAQtB,EAA4CV,mBAAS,IAArD,mBAAOmI,EAAP,KAAuBC,EAAvB,KACA,EAA8DpI,oBAAS,GAAvE,mBAAOkK,EAAP,KAAgCC,EAAhC,KASA,OARAxJ,qBAAU,WACNwJ,GAA2B,GAC3BvJ,YAAW,WACP6H,EAAiB,MACA0B,GAAjBhC,KACD,OACJ,IAGC,cAAC6B,EAAsBlJ,SAAvB,CAAgCC,MAAO,CAAEoH,iBAAgBM,oBAAzD,SACKyB,EAA0B,cAAC,EAAD,IAAmBrJ,KCnBpDuJ,EACI,CAAEC,KAAM,QAASzD,UAAW,cAAC,EAAD,KADhCwD,EAES,CAAEC,KAAM,aAAczD,UAAW,cAAC,EAAD,KAF1CwD,EAGS,CAAEC,KAAM,aAAczD,UAAW,cAAC,EAAD,KAH1CwD,EAIO,CAAEC,KAAM,WAAYzD,UAAW,cAAC,EAAD,KAJtCwD,EAKc,CAAEC,KAAM,mBAAoBzD,UAAW,cAAC,EAAD,KAgC5C0D,MA1Bf,WACE,OACE,mCACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,UACE,qBAAK/K,UAAU,sBAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO8K,KAAMD,EAAYC,KAAME,QAAS,cAAC,EAAD,IAAxC,gBACA,cAAC,IAAD,CAAOF,KAAMD,EAAiBC,KAAME,QAAS,cAAC,EAAD,IAA7C,gBACA,cAAC,IAAD,CAAOF,KAAMD,EAAeC,KAAME,QAAS,cAAC,EAAD,IAA3C,gBACA,cAAC,IAAD,CAAOF,KAAMD,EAAiBC,KAAME,QAAS,cAAC,EAAD,IAA7C,gBACA,cAAC,IAAD,CAAOF,KAAMD,EAAsBC,KAAME,QAAS,cAAC,EAAD,IAAlD,iCC1BHC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.841bd918.chunk.js","sourcesContent":["import { ReactElement } from \"react\"\r\nimport { Skeleton } from \"@mui/material\"\r\nconst SkeletonBase = (): ReactElement => {\r\n    return (<>\r\n        <div className=\"col-md-8 offset-md-2 text-center\">\r\n            <Skeleton variant=\"text\" height={40} />\r\n            <div className=\"spinner-grow text-dark\" role=\"status\">\r\n                <span className=\"visually-hidden\">Loading...</span>\r\n            </div>\r\n            <h5 className=\"test-center\"> ....Loading </h5>\r\n            <Skeleton variant=\"rectangular\" height={118} />\r\n\r\n        </div>\r\n\r\n    </>)\r\n\r\n\r\n}\r\n\r\nexport default SkeletonBase","import { Children, createContext, useEffect, useState } from \"react\"\r\nimport SkeletonBase from \"../components/baseComponents/SkeletonBase\";\r\nimport { IWorldData } from \"../interfaces/worldData\";\r\n\r\nexport const WorldDataContext = createContext({});\r\n\r\nconst WorldDataContextProvider = (props: any) => {\r\n    const [worldData, setWorldData] = useState({})\r\n    const [isLoading, setIsLoading] = useState(false)\r\n\r\n    const WorldDataurl = \"https://corona.lmao.ninja/v2/all\"\r\n\r\n    const fetchData = async (): Promise<IWorldData> => {\r\n        const res = await fetch(WorldDataurl)\r\n        const data = await res.json();\r\n        setWorldData(data)\r\n        return data\r\n    }\r\n    useEffect(() => {\r\n        setIsLoading(true)\r\n        fetchData()\r\n        setTimeout(() => {\r\n            worldData ? setIsLoading(false) : setIsLoading(true)\r\n\r\n        }, 1000)\r\n\r\n    }, [])\r\n\r\n\r\n    const { children } = props\r\n    return (\r\n        <WorldDataContext.Provider value={worldData}>\r\n            {isLoading ? <SkeletonBase /> : children}\r\n\r\n        </WorldDataContext.Provider>\r\n    )\r\n\r\n\r\n\r\n}\r\n\r\nexport default WorldDataContextProvider","import { Grid, Box } from \"@mui/material\";\r\nimport { useContext } from \"react\"\r\nimport { WorldDataContext } from \"../../contexts/worldCasesContext\"\r\nimport { IWorldData } from \"../../interfaces/worldData\";\r\n\r\n\r\n\r\nconst WorldDataSummary = () => {\r\n    const worldData: IWorldData = useContext(WorldDataContext)\r\n    console.log(\"worldData\", worldData);\r\n\r\n    return (\r\n        <>\r\n\r\n            <Grid container className=\"bg-dark text-primary\" >\r\n                <Grid item md={12} sm={12} xs={12}>\r\n                    <Box sx={{ p: 2, border: '1px solid grey' }}>\r\n                        <h3> Total Cases </h3>\r\n                        <Box sx={{ color: 'info.main' }}>  {worldData.cases}</Box>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item md={12} sm={6} xs={12}>\r\n                    <Box sx={{ p: 2, border: '1px solid grey' }}>\r\n                        <h3> Active  Cases</h3>\r\n                        <Box sx={{ color: 'info.main' }}>   {worldData.active}\r\n                        </Box>\r\n                    </Box>\r\n\r\n                </Grid>\r\n                <Grid md={12} sm={6} xs={12}>\r\n                    <Box sx={{ p: 2, border: '1px solid grey' }}>\r\n                        <h3> Today Cases</h3>\r\n                        <Box sx={{ color: 'info.main' }}>   {worldData.todayCases}\r\n                        </Box>\r\n                    </Box>\r\n\r\n                </Grid>\r\n                <Grid item md={12} sm={12} xs={12}>\r\n                    <Box sx={{ p: 2, border: '1px solid grey' }}>\r\n                        <h3> Total Recovered </h3>\r\n                        <Box sx={{ color: 'info.main' }}>   {worldData.recovered}\r\n                        </Box>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item md={12} sm={6} xs={12}>\r\n                    <Box sx={{ p: 2, border: '1px solid grey' }}>\r\n                        <h3> Today Recovered</h3>\r\n                        <Box sx={{ color: 'info.main' }}>  {worldData.todayRecovered}\r\n                        </Box>\r\n                    </Box>\r\n\r\n                </Grid>\r\n\r\n\r\n                <Grid md={12} sm={6} xs={12}>\r\n                    <Box sx={{ p: 2, border: '1px solid grey' }}>\r\n                        <h3> Today  Recovered </h3>\r\n                        <Box sx={{ color: 'info.main' }}>   {worldData.todayRecovered}\r\n                        </Box>\r\n                    </Box>\r\n\r\n                </Grid>\r\n                <Grid md={12} sm={12} xs={12}>\r\n                    <Box sx={{ p: 2, border: '1px solid grey' }}>\r\n                        <h3> Total  Deaths </h3>\r\n                        <Box sx={{ color: 'info.main' }}>   {worldData.deaths}\r\n                        </Box>\r\n                    </Box>\r\n\r\n                </Grid>\r\n                <Grid md={12} sm={6} xs={12}>\r\n                    <Box sx={{ p: 2, border: '1px solid grey' }}>\r\n                        <h3> Today  Deaths </h3>\r\n                        <Box sx={{ color: 'info.main' }}>   {worldData.todayDeaths}\r\n                        </Box>\r\n                    </Box>\r\n\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default WorldDataSummary","import { createContext, useEffect, useState } from \"react\"\r\nimport SkeletonBase from \"../components/baseComponents/SkeletonBase\";\r\nimport { ICountrydata } from \"../interfaces/CountryData\";\r\n\r\n\r\n\r\nexport const CountriesContext = createContext({});\r\n\r\nconst ApiUrl = \"https://corona-api.com/countries\"\r\n\r\nconst CountriesContextProvider = (props: any) => {\r\n    const [countriesData, setCountriesData] = useState<ICountrydata>({} as ICountrydata)\r\n    const [isCountriesDataLoading, setIsCountriesDataLoading] = useState(false)\r\n    const { children } = props\r\n\r\n    const fetchCountriesData = async (): Promise<ICountrydata> => {\r\n        const res = await fetch(ApiUrl);\r\n        const data = await res.json();\r\n        setCountriesData(data);\r\n        return data\r\n    }\r\n    useEffect(() => {\r\n        setIsCountriesDataLoading(true)\r\n        fetchCountriesData()\r\n        setTimeout(() => {\r\n            setIsCountriesDataLoading(false)\r\n        }, 1000)\r\n\r\n    }, [])\r\n\r\n    return (\r\n\r\n        <CountriesContext.Provider value={countriesData}>   {isCountriesDataLoading ? <SkeletonBase /> : children} </CountriesContext.Provider>\r\n\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default CountriesContextProvider\r\n\r\n\r\n","import { Grid } from \"@mui/material\"\r\nimport { ReactElement, useContext, useEffect, useState } from \"react\"\r\nimport { WorldMap } from \"react-svg-worldmap\"\r\nimport { CountriesContext } from \"../../contexts/countriesContext\"\r\nimport { ICountrydata } from \"../../interfaces/CountryData\";\r\n\r\n\r\nconst MapWorldComponent = (): ReactElement => {\r\n    const countriesData: ICountrydata = useContext(CountriesContext)\r\n    console.log(\"countriesData in maps component\", countriesData)\r\n\r\n    const [countriesMapData, setCountriesMapData] = useState([])\r\n    console.log(\"countriesData in maps\", countriesData)\r\n\r\n    const prepareDataForCountriesMap = () => {\r\n        const formattedData: any = [];\r\n        if (countriesData.data) {\r\n            countriesData.data!.map(C => {\r\n                const obj = { country: C.code, value: C.latest_data.confirmed }\r\n                return formattedData.push(obj)\r\n            })\r\n            setCountriesMapData(formattedData)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        prepareDataForCountriesMap()\r\n\r\n    }, [])\r\n    return (\r\n\r\n        <>\r\n            <Grid item md={12} sm={12} xs={12}>\r\n                <WorldMap color=\"rgb(142 93 151)\" title=\"World map showing active cases\" data={countriesMapData} />\r\n            </Grid>\r\n\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default MapWorldComponent","import { useContext } from \"react\"\r\nimport { WorldDataContext } from \"../../contexts/worldCasesContext\"\r\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport { IWorldData } from \"../../interfaces/worldData\";\r\n\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\nconst WorldPieChart = () => {\r\n    const worldData: IWorldData = useContext(WorldDataContext)\r\n    const mapLabels = [\"cases\", \"deaths\", \"recovered\"];\r\n    const mapData = [worldData.cases, worldData.deaths, worldData.recovered]\r\n\r\n    const data = {\r\n        labels: mapLabels,\r\n        datasets: [\r\n            {\r\n                label: ' World Cases',\r\n                data: mapData,\r\n                backgroundColor: [\r\n                    'rgb(228 173 237)',\r\n                    'rgb(255, 99, 132)',\r\n                    'rgb(13 202 240)',\r\n\r\n                ],\r\n                borderWidth: 1\r\n            }\r\n        ]\r\n\r\n\r\n    }\r\n    const mapConfig = {\r\n        type: 'doughnut',\r\n        data: data,\r\n    };\r\n\r\n    return (\r\n\r\n        <Doughnut data={data} >  </Doughnut>\r\n\r\n\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default WorldPieChart","import { ReactElement } from \"react\"\r\n\r\n\r\nimport {\r\n    Chart as ChartJS,\r\n    LinearScale,\r\n    CategoryScale,\r\n    BarElement,\r\n    PointElement,\r\n    LineElement,\r\n    Legend,\r\n    Tooltip,\r\n} from 'chart.js';\r\n\r\nimport { Chart } from 'react-chartjs-2';\r\n\r\nChartJS.register(\r\n    LinearScale,\r\n    CategoryScale,\r\n    BarElement,\r\n    PointElement,\r\n    LineElement,\r\n    Legend,\r\n    Tooltip\r\n);\r\n\r\nconst labels = [\"total\", \"today\", \"active\", \"Recovered\"]\r\n\r\nconst datasets = [\r\n    {\r\n        type: 'line' as const,\r\n        label: 'Cases',\r\n        borderColor: 'rgb(13 202 240)',\r\n        borderWidth: 2,\r\n        fill: false,\r\n        data: [5000, 2000, 4000, 3000],\r\n    },\r\n    {\r\n        type: 'line' as const,\r\n        label: 'Deaths',\r\n        borderColor: 'rgb(205 114 221)',\r\n        borderWidth: 2,\r\n        fill: false,\r\n        data: [100, 200, 3000, 5000],\r\n    }\r\n\r\n]\r\n\r\nconst data = {\r\n    labels, datasets\r\n}\r\n\r\nconst WorldMultiBarChart = (): ReactElement => {\r\n\r\n    return (\r\n\r\n        <><Chart type='bar' data={data} /> </>\r\n    )\r\n\r\n}\r\n\r\nexport default WorldMultiBarChart","import WorldDataSummary from \"../components/world/WorldDataSummary\"\r\nimport { Grid } from \"@mui/material\";\r\nimport MapWorldComponent from \"../components/maps/MapWorld\";\r\nimport WorldPieChart from \"../components/charts/WorldPieChart\";\r\nimport WorldMultiBarChart from \"../components/charts/WorldMultiBarChart\";\r\nconst HomePage = () => {\r\n    return (<>\r\n        <h2> Home page</h2>\r\n        <Grid container justifyContent=\"center\" direction=\"row\">\r\n            <Grid item md={3} sm={12} xs={12} className=\"border\">\r\n                <WorldDataSummary></WorldDataSummary>\r\n            </Grid>\r\n            <Grid item md={9} sm={12} xs={12} className=\"border\">\r\n                <Grid container justifyContent=\"center\" direction=\"row\">\r\n                    <Grid item md={6} sm={12} xs={12} className=\"border\">\r\n                        <MapWorldComponent></MapWorldComponent>\r\n                    </Grid>\r\n                    <Grid item md={3} sm={6} xs={12} className=\"border\">\r\n                        <WorldPieChart></WorldPieChart>\r\n                    </Grid>\r\n                    <Grid item md={3} sm={6} xs={12} className=\"border\">\r\n                        <WorldMultiBarChart />\r\n                        <WorldMultiBarChart />\r\n                        <WorldMultiBarChart />\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n\r\n\r\n        </Grid>\r\n    </>\r\n\r\n\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default HomePage","import { ReactElement } from \"react\"\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const Header = (): ReactElement => {\r\n\r\n    return (\r\n\r\n        <>\r\n\r\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n\r\n                <div className=\"container-fluid\">\r\n                    <Link className=\"navbar-brand text-info\" to=\"/home\">Covid-19 Tracker</Link>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n\r\n                    <div className=\"collapse navbar-collapse \" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link active\" to=\"/dashboard\">Dashboard</Link>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link\" to=\"/regions\">Regions</Link>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link\" to=\"/countries\">Countries</Link>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default Header","import { ReactElement } from \"react\"\r\n\r\nconst DashBoardPage = (): ReactElement => {\r\n    return (\r\n        <> <h3> DashBoard Page </h3></>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default DashBoardPage","import { useState } from 'react';\r\nimport Card from '@mui/material/Card';\r\nimport CardActions from '@mui/material/CardActions';\r\nimport CardContent from '@mui/material/CardContent';\r\n\r\n\r\nimport { Typography, CircularProgress } from '@mui/material';\r\n\r\nimport { IData } from '../../interfaces/CountryData';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend, PointElement,\r\n    LineElement,\r\n} from 'chart.js';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\ninterface CountrySummaryProps {\r\n    country: IData\r\n}\r\n\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement, PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n);\r\n\r\n\r\n\r\nconst CountrySummary = (props: CountrySummaryProps) => {\r\n    const { country } = props;\r\n    const { latest_data: latestData } = country;\r\n    const [isloadindChart] = useState(false)\r\n\r\n    const labels = [\"Deaths\"];\r\n    const chartOptions = {\r\n        responsive: true,\r\n        plugins: {\r\n            legend: {\r\n                position: 'top' as const,\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: country.name,\r\n            },\r\n        },\r\n    };\r\n\r\n    const data = {\r\n        labels,\r\n        datasets: [\r\n            {\r\n                label: 'Deaths',\r\n                data: [latestData.deaths],\r\n                backgroundColor: 'rgba(255, 99, 132,0.5)',\r\n            },\r\n            {\r\n                label: 'Cases',\r\n                data: [latestData.confirmed],\r\n                backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n            },\r\n            {\r\n                label: 'Recovered',\r\n                data: [latestData.recovered ? latestData.recovered : 0],\r\n                backgroundColor: 'rgb(212 140 225)',\r\n            },\r\n\r\n        ],\r\n    };\r\n\r\n\r\n    return (\r\n        <Card sx={{ minWidth: 345, m: 2, boxShadow: 3 }} className=\"bg-light text-info\"  >\r\n\r\n            {isloadindChart ? <CircularProgress color=\"inherit\" /> : <Bar options={chartOptions} data={data} > </Bar>}\r\n\r\n            <CardContent>\r\n                <Typography gutterBottom variant=\"h5\" component=\"div\"   >\r\n                    <p className=\"bg-dark\" style={{ color: \"rgb(187 52 211)\" }} >   {country.name}</p>\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    <Link className='btn btn-outline-dark' to={`/countries/${country.code}`} >View country deatils </Link>\r\n                </Typography>\r\n                <CardActions></CardActions>\r\n            </CardContent>\r\n        </Card >\r\n    );\r\n}\r\nexport default CountrySummary; ","\r\n\r\ninterface SearchFormProps {\r\n    handleSearch: (val: string) => void\r\n\r\n}\r\n\r\n\r\nexport default function SearchcountriesForm(props: SearchFormProps) {\r\n    const { handleSearch } = props\r\n\r\n    return (\r\n        <>\r\n            <form action=\"\">\r\n                <div className=\"form-group\">\r\n                    <input type=\"text\" name=\"search\" id=\"\" className=\"form-control\" onChange={(e) => handleSearch(e.target.value)} placeholder=\"Type country name to search \" />\r\n                </div>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n","import { ReactElement, useContext, useState } from \"react\"\r\nimport { CountriesContext } from \"../../contexts/countriesContext\"\r\nimport { ICountrydata } from \"../../interfaces/CountryData\"\r\nimport CountrySummary from \"./CountrySummary\"\r\nimport { Grid } from \"@mui/material\";\r\nimport SearchcountriesForm from \"../forms/SearchCountriesForm\";\r\n\r\n\r\nconst CountriesList = (): ReactElement => {\r\n    const countriesData: ICountrydata = useContext(CountriesContext)\r\n    const [countriesListData, setCountriesListData] = useState(countriesData.data)\r\n\r\n    const handleSearch = (val: any): void => {\r\n        const searchResult = countriesData.data?.filter((country) => {\r\n\r\n            return country.name.toLowerCase().includes(val);\r\n\r\n        })\r\n        console.log(`searchResult`, searchResult)\r\n        setCountriesListData(searchResult)\r\n\r\n    }\r\n\r\n    return (\r\n        <> <h3 className=\"text-center text-info\">Countries List</h3>\r\n            <Grid container justifyContent=\"center\" direction=\"row\" m={2}>\r\n                <Grid item md={8} sm={12} xs={12} className=\"border\">\r\n                    <SearchcountriesForm handleSearch={handleSearch} />\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container justifyContent=\"center\" direction=\"row\">\r\n\r\n                {!countriesListData ? \"...Getting Data\" :\r\n\r\n                    countriesListData.map(country => <CountrySummary key={country.code} country={country} />)\r\n                }\r\n\r\n\r\n            </Grid>\r\n\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default CountriesList","import { ReactElement } from \"react\"\r\nimport CountriesList from \"../components/countries/CountriesList\"\r\n\r\n\r\nconst CountriesPage = (): ReactElement => {\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <CountriesList />\r\n        </>\r\n\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default CountriesPage","const RegionsPage = () => {\r\n\r\n    return (\r\n        <> <h3> Regions Page </h3></>\r\n    )\r\n\r\n}\r\nexport default RegionsPage","import {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n} from 'chart.js';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nimport { Chart } from 'react-chartjs-2';\r\nimport { IBarChartdatasets } from '../../interfaces/ChartData';\r\n\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n);\r\nexport const options = {\r\n    responsive: true,\r\n    plugins: {\r\n        legend: {\r\n            position: 'top' as const,\r\n        },\r\n        title: {\r\n            display: true,\r\n            text: 'Chart.js Bar Chart',\r\n        },\r\n    },\r\n};\r\n\r\nconst labels = [\"total\", \"today\", \"active\", \"Recovered\"]\r\nconst mapData = [1000, 2000, 5000, 4000]\r\nconst datasets = [\r\n\r\n    {\r\n        label: ' World Cases',\r\n        data: mapData,\r\n        backgroundColor: [\r\n            'rgb(228 173 237)',\r\n            'rgb(255, 99, 132)',\r\n            'rgb(13 202 240)',\r\n\r\n        ],\r\n        borderWidth: 1\r\n    }\r\n\r\n]\r\n\r\nconst data = {\r\n    labels, datasets\r\n}\r\n\r\n\r\ninterface CountrySummaryBarChartProps {\r\n    labels: Array<string>,\r\n    datasets: Array<IBarChartdatasets>\r\n\r\n}\r\n\r\nconst CountrySummaryBarChart = (props: CountrySummaryBarChartProps) => {\r\n    const { labels, datasets } = props\r\n    return (\r\n        <>\r\n            <Bar data={{ labels, datasets }} options={options} >  </Bar>\r\n        </>\r\n    )\r\n}\r\nexport default CountrySummaryBarChart","import { ReactElement, useState, useEffect } from \"react\";\r\nimport { Grid } from \"@mui/material\";\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport { useParams } from 'react-router-dom';\r\nimport CountrySummaryBarChart from '../charts/CountrySummaryBarChart'\r\nimport { IBarChartdatasets } from \"../../interfaces/ChartData\";\r\nimport SkeletonBase from \"../baseComponents/SkeletonBase\";\r\n\r\nconst CountryDetails = (): ReactElement => {\r\n    const { code } = useParams();\r\n\r\n    const [countryDetails, setCountrydetails] = useState<any>({})\r\n    const [mapTimeline, setMapTimeline] = useState([]);\r\n    const [isloading, setIsloading] = useState<boolean>(false)\r\n\r\n    const BaseAPIUrl = \"https://corona-api.com/countries\";\r\n\r\n    const fetchCountryData = async (code: string) => {\r\n        const res = await fetch(`${BaseAPIUrl}/${code}`);\r\n        const data = await res.json();\r\n        setCountrydetails(data);\r\n        setMapTimeline(data.data.timeline.slice(0, 5))\r\n\r\n        return data\r\n    }\r\n\r\n    const labels = mapTimeline.map((obj: any) => obj.date);\r\n    const active = mapTimeline.map((obj: any) => obj.active);\r\n    const confirmed = mapTimeline.map((obj: any) => obj.confirmed)\r\n    const recovered = mapTimeline.map((obj: any) => obj.recovered)\r\n    const deaths = mapTimeline.map((obj: any) => obj.deaths)\r\n\r\n    const newConfirmed = mapTimeline.map((obj: any) => obj.new_confirmed);\r\n    const newRecovered = mapTimeline.map((obj: any) => obj.new_recovered)\r\n    const newDeaths = mapTimeline.map((obj: any) => obj.new_deaths)\r\n\r\n\r\n    useEffect(() => {\r\n        setIsloading(true)\r\n        fetchCountryData(code!)\r\n        setTimeout(() => {\r\n            countryDetails ? setIsloading(false) : setIsloading(true)\r\n        }, 1500)\r\n\r\n    }, [])\r\n\r\n\r\n    const dataSets: IBarChartdatasets[] = [\r\n        {\r\n            label: 'active',\r\n            data: active,\r\n            backgroundColor: 'rgba(255, 99, 132,0.5)',\r\n        },\r\n        {\r\n            label: 'confirmed',\r\n            data: confirmed,\r\n            backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n        },\r\n        {\r\n            label: 'deaths',\r\n            data: deaths,\r\n            backgroundColor: ' rgb(142 93 151)',\r\n        },\r\n        {\r\n            label: 'recovered',\r\n            data: recovered,\r\n            backgroundColor: 'rgb(62 191 137 / 48%)',\r\n        },\r\n\r\n    ]\r\n\r\n    const newCasesdataSets: IBarChartdatasets[] = [\r\n\r\n        {\r\n            label: 'new_confirmed',\r\n            data: newConfirmed,\r\n            backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n        },\r\n        {\r\n            label: 'new_deaths',\r\n            data: newDeaths,\r\n            backgroundColor: ' rgb(142 93 151)',\r\n        },\r\n        {\r\n            label: 'new_recovered',\r\n            data: newRecovered,\r\n            backgroundColor: 'rgb(62 191 137 / 48%)',\r\n        },\r\n\r\n    ]\r\n    const doughnutDatasets = [\r\n        {\r\n            label: 'Cases',\r\n            data: [countryDetails.data?.latest_data?.deaths, countryDetails.data?.latest_data?.confirmed, countryDetails.data?.latest_data?.recovered],\r\n            backgroundColor: [\r\n                'rgba(255, 99, 132, 0.2)',\r\n                'rgba(54, 162, 235, 0.2)',\r\n                'rgba(255, 206, 86, 0.2)',\r\n\r\n            ],\r\n            borderColor: [\r\n                'rgba(255, 99, 132, 1)',\r\n                'rgba(54, 162, 235, 1)',\r\n                'rgba(255, 206, 86, 1)',\r\n\r\n            ],\r\n            borderWidth: 1,\r\n        },\r\n    ]\r\n\r\n    const data = {\r\n        labels: ['Deaths', 'Confiremed', 'Recovered'],\r\n        datasets: doughnutDatasets\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            {isloading ? <SkeletonBase /> :\r\n                <> <h2 className=\"text-primary text-center\">{countryDetails.data?.name} </h2>\r\n                    <Grid container justifyContent=\"center\" direction=\"row\">\r\n                        <Grid item md={3} sm={12} xs={12} className=\"border  \">\r\n                            <Grid container justifyContent=\"center\" direction=\"row\">\r\n                                <Grid item md={12} sm={12} xs={12} className=\"border bg-dark text-warning \">\r\n                                    <span>last Update at : {new Date(countryDetails.data?.updated_at).toLocaleString()\r\n                                    } </span>\r\n                                </Grid>\r\n                                <Grid item md={10} sm={12} xs={12} className=\"  text-warning \">\r\n                                    <h3 className=\"text-primary\"> TimeLine Data</h3>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid item md={9} sm={12} xs={12} >\r\n                            <Grid container justifyContent=\"center\" direction=\"row\" className=\"border bg-dark \">\r\n                                <Grid item md={3} sm={6} xs={6} className=\"border\">\r\n                                    <h3 className=\"text-info text-center\"> Population  </h3>\r\n                                    <h5 className=\"text-secondary\"> {countryDetails.data?.population} </h5>\r\n                                </Grid>\r\n                                <Grid item md={3} sm={6} xs={6} className=\"border\">\r\n                                    <h3 className=\"text-info text-center\">  Cases  </h3>\r\n                                    <h5 className=\"text-secondary\"> {countryDetails.data?.latest_data?.confirmed} </h5>\r\n                                </Grid>\r\n                                <Grid item md={3} sm={6} xs={6} className=\"border\">\r\n                                    <h3 className=\"text-info text-center\"> Deaths  </h3>\r\n                                    <h5 className=\"text-secondary\">  {countryDetails.data?.latest_data?.deaths} </h5>\r\n                                </Grid>\r\n                                <Grid item md={3} sm={6} xs={6} className=\"border\">\r\n                                    <h3 className=\"text-info text-center\"> Recovered  </h3>\r\n                                    <h5 className=\"text-secondary\"> {countryDetails.data?.latest_data?.recovered} </h5>\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                            {/* Second Grid summary  */}\r\n                            <Grid container justifyContent=\"center\" direction=\"row\" className=\"border bg-dark \">\r\n                                <Grid item md={3} sm={6} xs={6} className=\"border\">\r\n                                    <h3 className=\"text-info text-center\"> Cases per million   </h3>\r\n                                    <h5 className=\"text-secondary\"> {countryDetails.data?.latest_data?.calculated.cases_per_million_population} </h5>\r\n                                </Grid>\r\n\r\n                                <Grid item md={3} sm={6} xs={6} className=\"border\">\r\n                                    <h3 className=\"text-info text-center\"> Deaths Rate </h3>\r\n                                    <h5 className=\"text-secondary\">  {countryDetails.data?.latest_data?.calculated.death_rate?.toFixed(2)} </h5>\r\n                                </Grid>\r\n                                <Grid item md={3} sm={6} xs={6} className=\"border\">\r\n                                    <h3 className=\"text-info text-center\"> Recovery Rate  </h3>\r\n                                    <h5 className=\"text-secondary\"> {countryDetails.data?.latest_data?.calculated.recovery_rate?.toFixed(2)} </h5>\r\n                                </Grid>\r\n                                <Grid item md={3} sm={6} xs={6} className=\"border\">\r\n                                    <h3 className=\"text-info text-center\">   Recovered_to death ratio </h3>\r\n                                    <h5 className=\"text-secondary\"> {countryDetails.data?.latest_data?.calculated?.recovered_vs_death_ratio ?? 0} </h5>\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                            <Grid container justifyContent=\"center\" direction=\"row\" className=\"border \">\r\n                                <Grid item md={4} sm={6} xs={6} className=\"border\">\r\n                                    <CountrySummaryBarChart labels={labels} datasets={dataSets} ></CountrySummaryBarChart>\r\n                                </Grid>\r\n                                <Grid item md={4} sm={6} xs={6} className=\"border\">\r\n                                    <CountrySummaryBarChart labels={labels} datasets={newCasesdataSets} ></CountrySummaryBarChart>\r\n                                </Grid>\r\n                                <Grid item md={4} sm={6} xs={6} className=\"border\" >\r\n                                    <Doughnut data={data} style={{ maxHeight: 350 }} ></Doughnut>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n\r\n\r\n\r\n\r\n                </>}\r\n        </>\r\n\r\n    )\r\n\r\n\r\n}\r\nexport default CountryDetails","\r\nimport { createContext, useEffect, useState } from \"react\";\r\n\r\nimport SkeletonBase from \"../components/baseComponents/SkeletonBase\";\r\n\r\nexport const CountryDetailscontext = createContext<any>({});\r\n\r\nconst BaseAPIUrl = \"https://corona-api.com/countries\";\r\n\r\n\r\n\r\n\r\nconst CountryDetailsProvider = ({ children }: any) => {\r\n\r\n    const fetchCountryData = async (code: string) => {\r\n        const res = await fetch(`${BaseAPIUrl}/${code}`);\r\n        const data = await res.json();\r\n        console.log(`data::>>>>`, data)\r\n        setCountrydetails(data)\r\n        return data\r\n    }\r\n\r\n    const [countryDetails, setCountrydetails] = useState({})\r\n    const [isCountryDetailsLoading, setIsCountryDetailsLoading] = useState(false)\r\n    useEffect(() => {\r\n        setIsCountryDetailsLoading(true)\r\n        setTimeout(() => {\r\n            fetchCountryData(\"au\")\r\n            countryDetails ? setIsCountryDetailsLoading(false) : setIsCountryDetailsLoading(true)\r\n        }, 1000)\r\n    }, [])\r\n\r\n    return (\r\n        <CountryDetailscontext.Provider value={{ countryDetails, fetchCountryData }}>\r\n            {isCountryDetailsLoading ? <SkeletonBase /> : children}\r\n        </CountryDetailscontext.Provider>\r\n\r\n    )\r\n\r\n}\r\nexport default CountryDetailsProvider\r\n\r\n\r\n","\nimport './App.css';\nimport HomePage from './pages/HomePage';\nimport WorldDataContextProvider from './contexts/worldCasesContext';\nimport Header from './components/baseComponents/Main-nav';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom'\nimport DashBoardPage from './pages/DashBoardPage';\nimport CountriesPage from './pages/CountriesPage';\nimport RegionsPage from './pages/RegionsPage';\nimport CountryDetails from './components/countries/CountryDetails';\nimport CountriesContextProvider from './contexts/countriesContext';\nimport CountryDetailsProvider from './contexts/CountryDetailsContext';\n\n\n\nconst routes = {\n  \"home\": { path: \"/home\", component: <HomePage /> },\n  \"dashobard\": { path: \"/dashboard\", component: <DashBoardPage /> },\n  \"countries\": { path: \"/countries\", component: <CountriesPage /> },\n  \"regions\": { path: \"/regions\", component: <RegionsPage /> },\n  \"countryDetails\": { path: \"/countries/:code\", component: <CountryDetails /> },\n\n}\n\n\n\nfunction App() {\n  return (\n    <>\n      <BrowserRouter>\n        <Header />\n        <WorldDataContextProvider>\n          <CountriesContextProvider>\n            <CountryDetailsProvider>\n              <div className=\"App container-fluid\">\n                <Routes>\n                  <Route path={routes.home.path} element={<HomePage />}>  </Route>\n                  <Route path={routes.dashobard.path} element={<DashBoardPage />}>  </Route>\n                  <Route path={routes.regions.path} element={<RegionsPage />}>  </Route>\n                  <Route path={routes.countries.path} element={<CountriesPage />}>  </Route>\n                  <Route path={routes.countryDetails.path} element={<CountryDetails />}>  </Route>\n                </Routes>\n              </div>\n            </CountryDetailsProvider>\n          </CountriesContextProvider>\n        </WorldDataContextProvider >\n      </BrowserRouter>\n    </>\n\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}